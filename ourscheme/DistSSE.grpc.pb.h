// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DistSSE.proto
#ifndef GRPC_DistSSE_2eproto__INCLUDED
#define GRPC_DistSSE_2eproto__INCLUDED

#include "DistSSE.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace DistSSE {

// Defines the service
class MathTest final {
 public:
  static constexpr char const* service_full_name() {
    return "DistSSE.MathTest";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Function invoked to send the request
    virtual ::grpc::Status sendRequest(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::DistSSE::MathReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::MathReply>> AsyncsendRequest(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::MathReply>>(AsyncsendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::MathReply>> PrepareAsyncsendRequest(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::MathReply>>(PrepareAsyncsendRequestRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Function invoked to send the request
      virtual void sendRequest(::grpc::ClientContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::MathReply>* AsyncsendRequestRaw(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::MathReply>* PrepareAsyncsendRequestRaw(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status sendRequest(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::DistSSE::MathReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::MathReply>> AsyncsendRequest(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::MathReply>>(AsyncsendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::MathReply>> PrepareAsyncsendRequest(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::MathReply>>(PrepareAsyncsendRequestRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void sendRequest(::grpc::ClientContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::DistSSE::MathReply>* AsyncsendRequestRaw(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::MathReply>* PrepareAsyncsendRequestRaw(::grpc::ClientContext* context, const ::DistSSE::MathRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Function invoked to send the request
    virtual ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequest(::grpc::ServerContext* context, ::DistSSE::MathRequest* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::MathReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendRequest<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendRequest() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_sendRequest<BaseClass>, ::DistSSE::MathRequest, ::DistSSE::MathReply>(
          [this](::grpc::ServerContext* context,
                 const ::DistSSE::MathRequest* request,
                 ::DistSSE::MathReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendRequest(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequest(::grpc::ServerContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_sendRequest<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendRequest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_sendRequest<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendRequest(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendRequest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::DistSSE::MathRequest, ::DistSSE::MathReply>(std::bind(&WithStreamedUnaryMethod_sendRequest<BaseClass>::StreamedsendRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::DistSSE::MathRequest* request, ::DistSSE::MathReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::MathRequest,::DistSSE::MathReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendRequest<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendRequest<Service > StreamedService;
};

class RPC final {
 public:
  static constexpr char const* service_full_name() {
    return "DistSSE.RPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Function invoked to send the request
    virtual ::grpc::Status registration(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncregistration(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncregistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsyncregistration(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsyncregistrationRaw(context, request, cq));
    }
    virtual ::grpc::Status update(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::Update>> batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::Update>>(batch_updateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::Update>> Asyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::Update>>(Asyncbatch_updateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::Update>> PrepareAsyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::Update>>(PrepareAsyncbatch_updateRaw(context, response, cq));
    }
    virtual ::grpc::Status search(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncsearch(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    virtual ::grpc::Status revocation(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncrevocation(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncrevocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> PrepareAsyncrevocation(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(PrepareAsyncrevocationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Function invoked to send the request
      virtual void registration(::grpc::ClientContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void update(::grpc::ClientContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void search(::grpc::ClientContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void revocation(::grpc::ClientContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncregistrationRaw(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsyncregistrationRaw(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistSSE::Update>* batch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::Update>* Asyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::Update>* PrepareAsyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncrevocationRaw(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* PrepareAsyncrevocationRaw(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status registration(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncregistration(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncregistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsyncregistration(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsyncregistrationRaw(context, request, cq));
    }
    ::grpc::Status update(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::Update>> batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::Update>>(batch_updateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::Update>> Asyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::Update>>(Asyncbatch_updateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::Update>> PrepareAsyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::Update>>(PrepareAsyncbatch_updateRaw(context, response, cq));
    }
    ::grpc::Status search(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncsearch(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    ::grpc::Status revocation(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncrevocation(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncrevocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> PrepareAsyncrevocation(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(PrepareAsyncrevocationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void registration(::grpc::ClientContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void update(::grpc::ClientContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void search(::grpc::ClientContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void revocation(::grpc::ClientContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncregistrationRaw(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsyncregistrationRaw(::grpc::ClientContext* context, const ::DistSSE::Registration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::Update& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistSSE::Update>* batch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::Update>* Asyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::Update>* PrepareAsyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::Search& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncrevocationRaw(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* PrepareAsyncrevocationRaw(::grpc::ClientContext* context, const ::DistSSE::Revocation& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registration_;
    const ::grpc::internal::RpcMethod rpcmethod_update_;
    const ::grpc::internal::RpcMethod rpcmethod_batch_update_;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_revocation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Function invoked to send the request
    virtual ::grpc::Status registration(::grpc::ServerContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::Update>* reader, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status revocation(::grpc::ServerContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registration() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registration(::grpc::ServerContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregistration(::grpc::ServerContext* context, ::DistSSE::Registration* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::DistSSE::Update* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_batch_update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::Update>* reader, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistSSE::ExecuteStatus, ::DistSSE::Update>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::DistSSE::Search* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_revocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_revocation() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_revocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status revocation(::grpc::ServerContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrevocation(::grpc::ServerContext* context, ::DistSSE::Revocation* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registration<WithAsyncMethod_update<WithAsyncMethod_batch_update<WithAsyncMethod_search<WithAsyncMethod_revocation<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_registration() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_registration<BaseClass>, ::DistSSE::Registration, ::DistSSE::ExecuteStatus>(
          [this](::grpc::ServerContext* context,
                 const ::DistSSE::Registration* request,
                 ::DistSSE::ExecuteStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->registration(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registration(::grpc::ServerContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registration(::grpc::ServerContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_update() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_update<BaseClass>, ::DistSSE::Update, ::DistSSE::ExecuteStatus>(
          [this](::grpc::ServerContext* context,
                 const ::DistSSE::Update* request,
                 ::DistSSE::ExecuteStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->update(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void update(::grpc::ServerContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_batch_update() {
    }
    ~ExperimentalWithCallbackMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::Update>* reader, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_search() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_search<BaseClass>, ::DistSSE::Search, ::DistSSE::ExecuteStatus>(
          [this](::grpc::ServerContext* context,
                 const ::DistSSE::Search* request,
                 ::DistSSE::ExecuteStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->search(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void search(::grpc::ServerContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_revocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_revocation() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_revocation<BaseClass>, ::DistSSE::Revocation, ::DistSSE::ExecuteStatus>(
          [this](::grpc::ServerContext* context,
                 const ::DistSSE::Revocation* request,
                 ::DistSSE::ExecuteStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->revocation(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_revocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status revocation(::grpc::ServerContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void revocation(::grpc::ServerContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_registration<ExperimentalWithCallbackMethod_update<ExperimentalWithCallbackMethod_batch_update<ExperimentalWithCallbackMethod_search<ExperimentalWithCallbackMethod_revocation<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registration() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registration(::grpc::ServerContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_batch_update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::Update>* reader, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_revocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_revocation() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_revocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status revocation(::grpc::ServerContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_registration() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registration(::grpc::ServerContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregistration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_batch_update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::Update>* reader, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_revocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_revocation() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_revocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status revocation(::grpc::ServerContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrevocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_registration() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_registration<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->registration(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registration(::grpc::ServerContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void registration(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_update<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->update(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_batch_update() {
    }
    ~ExperimentalWithRawCallbackMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::Update>* reader, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_search() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_search<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->search(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void search(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_revocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_revocation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_revocation<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->revocation(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_revocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status revocation(::grpc::ServerContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void revocation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_registration() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::DistSSE::Registration, ::DistSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_registration<BaseClass>::Streamedregistration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_registration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registration(::grpc::ServerContext* context, const ::DistSSE::Registration* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedregistration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::Registration,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::DistSSE::Update, ::DistSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_update<BaseClass>::Streamedupdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::Update* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::Update,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_search() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::DistSSE::Search, ::DistSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_search<BaseClass>::Streamedsearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::Search* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::Search,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_revocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_revocation() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::DistSSE::Revocation, ::DistSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_revocation<BaseClass>::Streamedrevocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_revocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status revocation(::grpc::ServerContext* context, const ::DistSSE::Revocation* request, ::DistSSE::ExecuteStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrevocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::Revocation,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registration<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_revocation<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registration<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_revocation<Service > > > > StreamedService;
};

}  // namespace DistSSE


#endif  // GRPC_DistSSE_2eproto__INCLUDED
