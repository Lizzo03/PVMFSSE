// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DistSSE.proto

#ifndef PROTOBUF_INCLUDED_DistSSE_2eproto
#define PROTOBUF_INCLUDED_DistSSE_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DistSSE_2eproto 

namespace protobuf_DistSSE_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DistSSE_2eproto
namespace DistSSE {
class ExecuteStatus;
class ExecuteStatusDefaultTypeInternal;
extern ExecuteStatusDefaultTypeInternal _ExecuteStatus_default_instance_;
class MathReply;
class MathReplyDefaultTypeInternal;
extern MathReplyDefaultTypeInternal _MathReply_default_instance_;
class MathRequest;
class MathRequestDefaultTypeInternal;
extern MathRequestDefaultTypeInternal _MathRequest_default_instance_;
class Registration;
class RegistrationDefaultTypeInternal;
extern RegistrationDefaultTypeInternal _Registration_default_instance_;
class Revocation;
class RevocationDefaultTypeInternal;
extern RevocationDefaultTypeInternal _Revocation_default_instance_;
class Search;
class SearchDefaultTypeInternal;
extern SearchDefaultTypeInternal _Search_default_instance_;
class Update;
class UpdateDefaultTypeInternal;
extern UpdateDefaultTypeInternal _Update_default_instance_;
}  // namespace DistSSE
namespace google {
namespace protobuf {
template<> ::DistSSE::ExecuteStatus* Arena::CreateMaybeMessage<::DistSSE::ExecuteStatus>(Arena*);
template<> ::DistSSE::MathReply* Arena::CreateMaybeMessage<::DistSSE::MathReply>(Arena*);
template<> ::DistSSE::MathRequest* Arena::CreateMaybeMessage<::DistSSE::MathRequest>(Arena*);
template<> ::DistSSE::Registration* Arena::CreateMaybeMessage<::DistSSE::Registration>(Arena*);
template<> ::DistSSE::Revocation* Arena::CreateMaybeMessage<::DistSSE::Revocation>(Arena*);
template<> ::DistSSE::Search* Arena::CreateMaybeMessage<::DistSSE::Search>(Arena*);
template<> ::DistSSE::Update* Arena::CreateMaybeMessage<::DistSSE::Update>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace DistSSE {

// ===================================================================

class MathRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistSSE.MathRequest) */ {
 public:
  MathRequest();
  virtual ~MathRequest();

  MathRequest(const MathRequest& from);

  inline MathRequest& operator=(const MathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MathRequest(MathRequest&& from) noexcept
    : MathRequest() {
    *this = ::std::move(from);
  }

  inline MathRequest& operator=(MathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MathRequest* internal_default_instance() {
    return reinterpret_cast<const MathRequest*>(
               &_MathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MathRequest* other);
  friend void swap(MathRequest& a, MathRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MathRequest* New() const final {
    return CreateMaybeMessage<MathRequest>(NULL);
  }

  MathRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MathRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MathRequest& from);
  void MergeFrom(const MathRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MathRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 b = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DistSSE.MathRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistSSE_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MathReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistSSE.MathReply) */ {
 public:
  MathReply();
  virtual ~MathReply();

  MathReply(const MathReply& from);

  inline MathReply& operator=(const MathReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MathReply(MathReply&& from) noexcept
    : MathReply() {
    *this = ::std::move(from);
  }

  inline MathReply& operator=(MathReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MathReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MathReply* internal_default_instance() {
    return reinterpret_cast<const MathReply*>(
               &_MathReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MathReply* other);
  friend void swap(MathReply& a, MathReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MathReply* New() const final {
    return CreateMaybeMessage<MathReply>(NULL);
  }

  MathReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MathReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MathReply& from);
  void MergeFrom(const MathReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MathReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DistSSE.MathReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistSSE_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Registration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistSSE.Registration) */ {
 public:
  Registration();
  virtual ~Registration();

  Registration(const Registration& from);

  inline Registration& operator=(const Registration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Registration(Registration&& from) noexcept
    : Registration() {
    *this = ::std::move(from);
  }

  inline Registration& operator=(Registration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Registration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Registration* internal_default_instance() {
    return reinterpret_cast<const Registration*>(
               &_Registration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Registration* other);
  friend void swap(Registration& a, Registration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Registration* New() const final {
    return CreateMaybeMessage<Registration>(NULL);
  }

  Registration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Registration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Registration& from);
  void MergeFrom(const Registration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Registration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes eid = 1;
  void clear_eid();
  static const int kEidFieldNumber = 1;
  const ::std::string& eid() const;
  void set_eid(const ::std::string& value);
  #if LANG_CXX11
  void set_eid(::std::string&& value);
  #endif
  void set_eid(const char* value);
  void set_eid(const void* value, size_t size);
  ::std::string* mutable_eid();
  ::std::string* release_eid();
  void set_allocated_eid(::std::string* eid);

  // bytes qkid = 2;
  void clear_qkid();
  static const int kQkidFieldNumber = 2;
  const ::std::string& qkid() const;
  void set_qkid(const ::std::string& value);
  #if LANG_CXX11
  void set_qkid(::std::string&& value);
  #endif
  void set_qkid(const char* value);
  void set_qkid(const void* value, size_t size);
  ::std::string* mutable_qkid();
  ::std::string* release_qkid();
  void set_allocated_qkid(::std::string* qkid);

  // bytes qkcid = 3;
  void clear_qkcid();
  static const int kQkcidFieldNumber = 3;
  const ::std::string& qkcid() const;
  void set_qkcid(const ::std::string& value);
  #if LANG_CXX11
  void set_qkcid(::std::string&& value);
  #endif
  void set_qkcid(const char* value);
  void set_qkcid(const void* value, size_t size);
  ::std::string* mutable_qkcid();
  ::std::string* release_qkcid();
  void set_allocated_qkcid(::std::string* qkcid);

  // bytes kid = 4;
  void clear_kid();
  static const int kKidFieldNumber = 4;
  const ::std::string& kid() const;
  void set_kid(const ::std::string& value);
  #if LANG_CXX11
  void set_kid(::std::string&& value);
  #endif
  void set_kid(const char* value);
  void set_kid(const void* value, size_t size);
  ::std::string* mutable_kid();
  ::std::string* release_kid();
  void set_allocated_kid(::std::string* kid);

  // bytes uid = 5;
  void clear_uid();
  static const int kUidFieldNumber = 5;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:DistSSE.Registration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr eid_;
  ::google::protobuf::internal::ArenaStringPtr qkid_;
  ::google::protobuf::internal::ArenaStringPtr qkcid_;
  ::google::protobuf::internal::ArenaStringPtr kid_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistSSE_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Update : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistSSE.Update) */ {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Update(Update&& from) noexcept
    : Update() {
    *this = ::std::move(from);
  }

  inline Update& operator=(Update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Update* internal_default_instance() {
    return reinterpret_cast<const Update*>(
               &_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Update* other);
  friend void swap(Update& a, Update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Update* New() const final {
    return CreateMaybeMessage<Update>(NULL);
  }

  Update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes wst = 1;
  void clear_wst();
  static const int kWstFieldNumber = 1;
  const ::std::string& wst() const;
  void set_wst(const ::std::string& value);
  #if LANG_CXX11
  void set_wst(::std::string&& value);
  #endif
  void set_wst(const char* value);
  void set_wst(const void* value, size_t size);
  ::std::string* mutable_wst();
  ::std::string* release_wst();
  void set_allocated_wst(::std::string* wst);

  // bytes adrf = 2;
  void clear_adrf();
  static const int kAdrfFieldNumber = 2;
  const ::std::string& adrf() const;
  void set_adrf(const ::std::string& value);
  #if LANG_CXX11
  void set_adrf(::std::string&& value);
  #endif
  void set_adrf(const char* value);
  void set_adrf(const void* value, size_t size);
  ::std::string* mutable_adrf();
  ::std::string* release_adrf();
  void set_allocated_adrf(::std::string* adrf);

  // bytes e = 3;
  void clear_e();
  static const int kEFieldNumber = 3;
  const ::std::string& e() const;
  void set_e(const ::std::string& value);
  #if LANG_CXX11
  void set_e(::std::string&& value);
  #endif
  void set_e(const char* value);
  void set_e(const void* value, size_t size);
  ::std::string* mutable_e();
  ::std::string* release_e();
  void set_allocated_e(::std::string* e);

  // @@protoc_insertion_point(class_scope:DistSSE.Update)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wst_;
  ::google::protobuf::internal::ArenaStringPtr adrf_;
  ::google::protobuf::internal::ArenaStringPtr e_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistSSE_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Search : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistSSE.Search) */ {
 public:
  Search();
  virtual ~Search();

  Search(const Search& from);

  inline Search& operator=(const Search& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Search(Search&& from) noexcept
    : Search() {
    *this = ::std::move(from);
  }

  inline Search& operator=(Search&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Search& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Search* internal_default_instance() {
    return reinterpret_cast<const Search*>(
               &_Search_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Search* other);
  friend void swap(Search& a, Search& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Search* New() const final {
    return CreateMaybeMessage<Search>(NULL);
  }

  Search* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Search>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Search& from);
  void MergeFrom(const Search& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Search* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes sf = 5;
  int sf_size() const;
  void clear_sf();
  static const int kSfFieldNumber = 5;
  const ::std::string& sf(int index) const;
  ::std::string* mutable_sf(int index);
  void set_sf(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sf(int index, ::std::string&& value);
  #endif
  void set_sf(int index, const char* value);
  void set_sf(int index, const void* value, size_t size);
  ::std::string* add_sf();
  void add_sf(const ::std::string& value);
  #if LANG_CXX11
  void add_sf(::std::string&& value);
  #endif
  void add_sf(const char* value);
  void add_sf(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sf() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sf();

  // bytes trid = 1;
  void clear_trid();
  static const int kTridFieldNumber = 1;
  const ::std::string& trid() const;
  void set_trid(const ::std::string& value);
  #if LANG_CXX11
  void set_trid(::std::string&& value);
  #endif
  void set_trid(const char* value);
  void set_trid(const void* value, size_t size);
  ::std::string* mutable_trid();
  ::std::string* release_trid();
  void set_allocated_trid(::std::string* trid);

  // bytes eid = 2;
  void clear_eid();
  static const int kEidFieldNumber = 2;
  const ::std::string& eid() const;
  void set_eid(const ::std::string& value);
  #if LANG_CXX11
  void set_eid(::std::string&& value);
  #endif
  void set_eid(const char* value);
  void set_eid(const void* value, size_t size);
  ::std::string* mutable_eid();
  ::std::string* release_eid();
  void set_allocated_eid(::std::string* eid);

  // bytes token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // bytes rst = 4;
  void clear_rst();
  static const int kRstFieldNumber = 4;
  const ::std::string& rst() const;
  void set_rst(const ::std::string& value);
  #if LANG_CXX11
  void set_rst(::std::string&& value);
  #endif
  void set_rst(const char* value);
  void set_rst(const void* value, size_t size);
  ::std::string* mutable_rst();
  ::std::string* release_rst();
  void set_allocated_rst(::std::string* rst);

  // @@protoc_insertion_point(class_scope:DistSSE.Search)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sf_;
  ::google::protobuf::internal::ArenaStringPtr trid_;
  ::google::protobuf::internal::ArenaStringPtr eid_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr rst_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistSSE_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Revocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistSSE.Revocation) */ {
 public:
  Revocation();
  virtual ~Revocation();

  Revocation(const Revocation& from);

  inline Revocation& operator=(const Revocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Revocation(Revocation&& from) noexcept
    : Revocation() {
    *this = ::std::move(from);
  }

  inline Revocation& operator=(Revocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Revocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Revocation* internal_default_instance() {
    return reinterpret_cast<const Revocation*>(
               &_Revocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Revocation* other);
  friend void swap(Revocation& a, Revocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Revocation* New() const final {
    return CreateMaybeMessage<Revocation>(NULL);
  }

  Revocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Revocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Revocation& from);
  void MergeFrom(const Revocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Revocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes eid = 1;
  void clear_eid();
  static const int kEidFieldNumber = 1;
  const ::std::string& eid() const;
  void set_eid(const ::std::string& value);
  #if LANG_CXX11
  void set_eid(::std::string&& value);
  #endif
  void set_eid(const char* value);
  void set_eid(const void* value, size_t size);
  ::std::string* mutable_eid();
  ::std::string* release_eid();
  void set_allocated_eid(::std::string* eid);

  // @@protoc_insertion_point(class_scope:DistSSE.Revocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr eid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistSSE_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecuteStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistSSE.ExecuteStatus) */ {
 public:
  ExecuteStatus();
  virtual ~ExecuteStatus();

  ExecuteStatus(const ExecuteStatus& from);

  inline ExecuteStatus& operator=(const ExecuteStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteStatus(ExecuteStatus&& from) noexcept
    : ExecuteStatus() {
    *this = ::std::move(from);
  }

  inline ExecuteStatus& operator=(ExecuteStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteStatus* internal_default_instance() {
    return reinterpret_cast<const ExecuteStatus*>(
               &_ExecuteStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ExecuteStatus* other);
  friend void swap(ExecuteStatus& a, ExecuteStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteStatus* New() const final {
    return CreateMaybeMessage<ExecuteStatus>(NULL);
  }

  ExecuteStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecuteStatus& from);
  void MergeFrom(const ExecuteStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:DistSSE.ExecuteStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistSSE_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MathRequest

// int32 a = 1;
inline void MathRequest::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 MathRequest::a() const {
  // @@protoc_insertion_point(field_get:DistSSE.MathRequest.a)
  return a_;
}
inline void MathRequest::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:DistSSE.MathRequest.a)
}

// int32 b = 2;
inline void MathRequest::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 MathRequest::b() const {
  // @@protoc_insertion_point(field_get:DistSSE.MathRequest.b)
  return b_;
}
inline void MathRequest::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:DistSSE.MathRequest.b)
}

// -------------------------------------------------------------------

// MathReply

// int32 result = 1;
inline void MathReply::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 MathReply::result() const {
  // @@protoc_insertion_point(field_get:DistSSE.MathReply.result)
  return result_;
}
inline void MathReply::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:DistSSE.MathReply.result)
}

// -------------------------------------------------------------------

// Registration

// bytes eid = 1;
inline void Registration::clear_eid() {
  eid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Registration::eid() const {
  // @@protoc_insertion_point(field_get:DistSSE.Registration.eid)
  return eid_.GetNoArena();
}
inline void Registration::set_eid(const ::std::string& value) {
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Registration.eid)
}
#if LANG_CXX11
inline void Registration::set_eid(::std::string&& value) {
  
  eid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Registration.eid)
}
#endif
inline void Registration::set_eid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Registration.eid)
}
inline void Registration::set_eid(const void* value, size_t size) {
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Registration.eid)
}
inline ::std::string* Registration::mutable_eid() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Registration.eid)
  return eid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Registration::release_eid() {
  // @@protoc_insertion_point(field_release:DistSSE.Registration.eid)
  
  return eid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Registration::set_allocated_eid(::std::string* eid) {
  if (eid != NULL) {
    
  } else {
    
  }
  eid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eid);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Registration.eid)
}

// bytes qkid = 2;
inline void Registration::clear_qkid() {
  qkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Registration::qkid() const {
  // @@protoc_insertion_point(field_get:DistSSE.Registration.qkid)
  return qkid_.GetNoArena();
}
inline void Registration::set_qkid(const ::std::string& value) {
  
  qkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Registration.qkid)
}
#if LANG_CXX11
inline void Registration::set_qkid(::std::string&& value) {
  
  qkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Registration.qkid)
}
#endif
inline void Registration::set_qkid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Registration.qkid)
}
inline void Registration::set_qkid(const void* value, size_t size) {
  
  qkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Registration.qkid)
}
inline ::std::string* Registration::mutable_qkid() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Registration.qkid)
  return qkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Registration::release_qkid() {
  // @@protoc_insertion_point(field_release:DistSSE.Registration.qkid)
  
  return qkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Registration::set_allocated_qkid(::std::string* qkid) {
  if (qkid != NULL) {
    
  } else {
    
  }
  qkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qkid);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Registration.qkid)
}

// bytes qkcid = 3;
inline void Registration::clear_qkcid() {
  qkcid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Registration::qkcid() const {
  // @@protoc_insertion_point(field_get:DistSSE.Registration.qkcid)
  return qkcid_.GetNoArena();
}
inline void Registration::set_qkcid(const ::std::string& value) {
  
  qkcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Registration.qkcid)
}
#if LANG_CXX11
inline void Registration::set_qkcid(::std::string&& value) {
  
  qkcid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Registration.qkcid)
}
#endif
inline void Registration::set_qkcid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qkcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Registration.qkcid)
}
inline void Registration::set_qkcid(const void* value, size_t size) {
  
  qkcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Registration.qkcid)
}
inline ::std::string* Registration::mutable_qkcid() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Registration.qkcid)
  return qkcid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Registration::release_qkcid() {
  // @@protoc_insertion_point(field_release:DistSSE.Registration.qkcid)
  
  return qkcid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Registration::set_allocated_qkcid(::std::string* qkcid) {
  if (qkcid != NULL) {
    
  } else {
    
  }
  qkcid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qkcid);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Registration.qkcid)
}

// bytes kid = 4;
inline void Registration::clear_kid() {
  kid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Registration::kid() const {
  // @@protoc_insertion_point(field_get:DistSSE.Registration.kid)
  return kid_.GetNoArena();
}
inline void Registration::set_kid(const ::std::string& value) {
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Registration.kid)
}
#if LANG_CXX11
inline void Registration::set_kid(::std::string&& value) {
  
  kid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Registration.kid)
}
#endif
inline void Registration::set_kid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Registration.kid)
}
inline void Registration::set_kid(const void* value, size_t size) {
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Registration.kid)
}
inline ::std::string* Registration::mutable_kid() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Registration.kid)
  return kid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Registration::release_kid() {
  // @@protoc_insertion_point(field_release:DistSSE.Registration.kid)
  
  return kid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Registration::set_allocated_kid(::std::string* kid) {
  if (kid != NULL) {
    
  } else {
    
  }
  kid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kid);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Registration.kid)
}

// bytes uid = 5;
inline void Registration::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Registration::uid() const {
  // @@protoc_insertion_point(field_get:DistSSE.Registration.uid)
  return uid_.GetNoArena();
}
inline void Registration::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Registration.uid)
}
#if LANG_CXX11
inline void Registration::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Registration.uid)
}
#endif
inline void Registration::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Registration.uid)
}
inline void Registration::set_uid(const void* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Registration.uid)
}
inline ::std::string* Registration::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Registration.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Registration::release_uid() {
  // @@protoc_insertion_point(field_release:DistSSE.Registration.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Registration::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Registration.uid)
}

// -------------------------------------------------------------------

// Update

// bytes wst = 1;
inline void Update::clear_wst() {
  wst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Update::wst() const {
  // @@protoc_insertion_point(field_get:DistSSE.Update.wst)
  return wst_.GetNoArena();
}
inline void Update::set_wst(const ::std::string& value) {
  
  wst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Update.wst)
}
#if LANG_CXX11
inline void Update::set_wst(::std::string&& value) {
  
  wst_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Update.wst)
}
#endif
inline void Update::set_wst(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Update.wst)
}
inline void Update::set_wst(const void* value, size_t size) {
  
  wst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Update.wst)
}
inline ::std::string* Update::mutable_wst() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Update.wst)
  return wst_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Update::release_wst() {
  // @@protoc_insertion_point(field_release:DistSSE.Update.wst)
  
  return wst_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Update::set_allocated_wst(::std::string* wst) {
  if (wst != NULL) {
    
  } else {
    
  }
  wst_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wst);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Update.wst)
}

// bytes adrf = 2;
inline void Update::clear_adrf() {
  adrf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Update::adrf() const {
  // @@protoc_insertion_point(field_get:DistSSE.Update.adrf)
  return adrf_.GetNoArena();
}
inline void Update::set_adrf(const ::std::string& value) {
  
  adrf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Update.adrf)
}
#if LANG_CXX11
inline void Update::set_adrf(::std::string&& value) {
  
  adrf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Update.adrf)
}
#endif
inline void Update::set_adrf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  adrf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Update.adrf)
}
inline void Update::set_adrf(const void* value, size_t size) {
  
  adrf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Update.adrf)
}
inline ::std::string* Update::mutable_adrf() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Update.adrf)
  return adrf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Update::release_adrf() {
  // @@protoc_insertion_point(field_release:DistSSE.Update.adrf)
  
  return adrf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Update::set_allocated_adrf(::std::string* adrf) {
  if (adrf != NULL) {
    
  } else {
    
  }
  adrf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adrf);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Update.adrf)
}

// bytes e = 3;
inline void Update::clear_e() {
  e_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Update::e() const {
  // @@protoc_insertion_point(field_get:DistSSE.Update.e)
  return e_.GetNoArena();
}
inline void Update::set_e(const ::std::string& value) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Update.e)
}
#if LANG_CXX11
inline void Update::set_e(::std::string&& value) {
  
  e_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Update.e)
}
#endif
inline void Update::set_e(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Update.e)
}
inline void Update::set_e(const void* value, size_t size) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Update.e)
}
inline ::std::string* Update::mutable_e() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Update.e)
  return e_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Update::release_e() {
  // @@protoc_insertion_point(field_release:DistSSE.Update.e)
  
  return e_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Update::set_allocated_e(::std::string* e) {
  if (e != NULL) {
    
  } else {
    
  }
  e_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Update.e)
}

// -------------------------------------------------------------------

// Search

// bytes trid = 1;
inline void Search::clear_trid() {
  trid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Search::trid() const {
  // @@protoc_insertion_point(field_get:DistSSE.Search.trid)
  return trid_.GetNoArena();
}
inline void Search::set_trid(const ::std::string& value) {
  
  trid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Search.trid)
}
#if LANG_CXX11
inline void Search::set_trid(::std::string&& value) {
  
  trid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Search.trid)
}
#endif
inline void Search::set_trid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Search.trid)
}
inline void Search::set_trid(const void* value, size_t size) {
  
  trid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Search.trid)
}
inline ::std::string* Search::mutable_trid() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Search.trid)
  return trid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Search::release_trid() {
  // @@protoc_insertion_point(field_release:DistSSE.Search.trid)
  
  return trid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_trid(::std::string* trid) {
  if (trid != NULL) {
    
  } else {
    
  }
  trid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trid);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Search.trid)
}

// bytes eid = 2;
inline void Search::clear_eid() {
  eid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Search::eid() const {
  // @@protoc_insertion_point(field_get:DistSSE.Search.eid)
  return eid_.GetNoArena();
}
inline void Search::set_eid(const ::std::string& value) {
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Search.eid)
}
#if LANG_CXX11
inline void Search::set_eid(::std::string&& value) {
  
  eid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Search.eid)
}
#endif
inline void Search::set_eid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Search.eid)
}
inline void Search::set_eid(const void* value, size_t size) {
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Search.eid)
}
inline ::std::string* Search::mutable_eid() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Search.eid)
  return eid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Search::release_eid() {
  // @@protoc_insertion_point(field_release:DistSSE.Search.eid)
  
  return eid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_eid(::std::string* eid) {
  if (eid != NULL) {
    
  } else {
    
  }
  eid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eid);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Search.eid)
}

// bytes token = 3;
inline void Search::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Search::token() const {
  // @@protoc_insertion_point(field_get:DistSSE.Search.token)
  return token_.GetNoArena();
}
inline void Search::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Search.token)
}
#if LANG_CXX11
inline void Search::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Search.token)
}
#endif
inline void Search::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Search.token)
}
inline void Search::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Search.token)
}
inline ::std::string* Search::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Search.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Search::release_token() {
  // @@protoc_insertion_point(field_release:DistSSE.Search.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Search.token)
}

// bytes rst = 4;
inline void Search::clear_rst() {
  rst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Search::rst() const {
  // @@protoc_insertion_point(field_get:DistSSE.Search.rst)
  return rst_.GetNoArena();
}
inline void Search::set_rst(const ::std::string& value) {
  
  rst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Search.rst)
}
#if LANG_CXX11
inline void Search::set_rst(::std::string&& value) {
  
  rst_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Search.rst)
}
#endif
inline void Search::set_rst(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Search.rst)
}
inline void Search::set_rst(const void* value, size_t size) {
  
  rst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Search.rst)
}
inline ::std::string* Search::mutable_rst() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Search.rst)
  return rst_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Search::release_rst() {
  // @@protoc_insertion_point(field_release:DistSSE.Search.rst)
  
  return rst_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_rst(::std::string* rst) {
  if (rst != NULL) {
    
  } else {
    
  }
  rst_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rst);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Search.rst)
}

// repeated bytes sf = 5;
inline int Search::sf_size() const {
  return sf_.size();
}
inline void Search::clear_sf() {
  sf_.Clear();
}
inline const ::std::string& Search::sf(int index) const {
  // @@protoc_insertion_point(field_get:DistSSE.Search.sf)
  return sf_.Get(index);
}
inline ::std::string* Search::mutable_sf(int index) {
  // @@protoc_insertion_point(field_mutable:DistSSE.Search.sf)
  return sf_.Mutable(index);
}
inline void Search::set_sf(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DistSSE.Search.sf)
  sf_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Search::set_sf(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:DistSSE.Search.sf)
  sf_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Search::set_sf(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sf_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DistSSE.Search.sf)
}
inline void Search::set_sf(int index, const void* value, size_t size) {
  sf_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Search.sf)
}
inline ::std::string* Search::add_sf() {
  // @@protoc_insertion_point(field_add_mutable:DistSSE.Search.sf)
  return sf_.Add();
}
inline void Search::add_sf(const ::std::string& value) {
  sf_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DistSSE.Search.sf)
}
#if LANG_CXX11
inline void Search::add_sf(::std::string&& value) {
  sf_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DistSSE.Search.sf)
}
#endif
inline void Search::add_sf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sf_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DistSSE.Search.sf)
}
inline void Search::add_sf(const void* value, size_t size) {
  sf_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DistSSE.Search.sf)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Search::sf() const {
  // @@protoc_insertion_point(field_list:DistSSE.Search.sf)
  return sf_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Search::mutable_sf() {
  // @@protoc_insertion_point(field_mutable_list:DistSSE.Search.sf)
  return &sf_;
}

// -------------------------------------------------------------------

// Revocation

// bytes eid = 1;
inline void Revocation::clear_eid() {
  eid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Revocation::eid() const {
  // @@protoc_insertion_point(field_get:DistSSE.Revocation.eid)
  return eid_.GetNoArena();
}
inline void Revocation::set_eid(const ::std::string& value) {
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistSSE.Revocation.eid)
}
#if LANG_CXX11
inline void Revocation::set_eid(::std::string&& value) {
  
  eid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistSSE.Revocation.eid)
}
#endif
inline void Revocation::set_eid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistSSE.Revocation.eid)
}
inline void Revocation::set_eid(const void* value, size_t size) {
  
  eid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistSSE.Revocation.eid)
}
inline ::std::string* Revocation::mutable_eid() {
  
  // @@protoc_insertion_point(field_mutable:DistSSE.Revocation.eid)
  return eid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Revocation::release_eid() {
  // @@protoc_insertion_point(field_release:DistSSE.Revocation.eid)
  
  return eid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Revocation::set_allocated_eid(::std::string* eid) {
  if (eid != NULL) {
    
  } else {
    
  }
  eid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eid);
  // @@protoc_insertion_point(field_set_allocated:DistSSE.Revocation.eid)
}

// -------------------------------------------------------------------

// ExecuteStatus

// bool status = 1;
inline void ExecuteStatus::clear_status() {
  status_ = false;
}
inline bool ExecuteStatus::status() const {
  // @@protoc_insertion_point(field_get:DistSSE.ExecuteStatus.status)
  return status_;
}
inline void ExecuteStatus::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:DistSSE.ExecuteStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DistSSE

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DistSSE_2eproto
