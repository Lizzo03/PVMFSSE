# Copyright (c) 2009  Scott Stafford
# Copyright 2014 The Ostrich / by Itamar O
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

"""
grpc.py: Google RPC Builder for SCons

This Builder invokes protoc to generate C++ and Python from a .proto file.
NOTE: Only C++ is supported.

Derived from original work by Scott Stafford and Itamar Ostricher
(http://www.scons.org/wiki/ProtocBuilder)
"""

__author__ = "Raphael Bost"

import os
import re

import SCons

_GRPCS = 'protoc'
_GRPC_PLUGIN = 'grpc_cpp_plugin'
_PROTOSUFFIX = '.proto'

_GRPC_SCANNER_RE = re.compile(r'^import\s+\"(.+\.proto)\"\;$', re.M)

def protoc_emitter(target, source, env):
    """Return list of targets generated by Protoc builder for source."""
    for src in source:
        proto = os.path.splitext(str(src))[0]
        if env['GRPCPPOUT']:
            target.append('$GRPCPPOUT'+'/%s.grpc.pb.cc' % (proto))
            target.append('$GRPCPPOUT'+'/%s.grpc.pb.h' % (proto))
    return target, source

def protoc_scanner(node, env, _):
    """Return list of file nodes that `node` imports"""
    contents = node.get_text_contents()
    # If build location different from sources location,
    #  get the destination base dir as the base for imports.
    nodepath = str(node.path)
    srcnodepath = str(node.srcnode())
    src_pos = nodepath.find(srcnodepath)
    base_path = src_pos and nodepath[:src_pos-1] or ''
    imports = [os.path.join(base_path, imp)
               for imp in _GRPC_SCANNER_RE.findall(contents)]
    return env.File(imports)

def generate(env):
    """Add Builders, Scanners and construction variables
    for protoc to the build Environment."""
    try:
        bldr = env['BUILDERS']['Grpc']
    except KeyError:
        action = SCons.Action.Action('$GRPCOM', '$GRPCOMSTR')
        bldr = SCons.Builder.Builder(action=action,
                                     emitter=protoc_emitter,
                                     src_suffix='$GRPCSRCSUFFIX')
        env['BUILDERS']['Grpc'] = bldr

    # pylint: disable=bad-whitespace
    env['GRPC']          = env.Detect(_GRPCS) or 'protoc'
    env['GRPCFLAGS']     = SCons.Util.CLVar('')
    env['GRPCSRCSUFFIX'] = _PROTOSUFFIX
    # Default proto search path is same dir
    env['PROTOPATH']       = ['.']
    # Default CPP output in same dir
    env['GRPCPPOUT']     = '.'
    # No default Python output
    env['PROTOPYOUT']      = ''
    proto_cmd     = ['$GRPC']
    proto_cmd.append('--plugin=protoc-gen-grpc=`which grpc_cpp_plugin`')
    proto_cmd.append('${["--proto_path=%s"%(x) for x in PROTOPATH]}')
    proto_cmd.append('$GRPCFLAGS')
    proto_cmd.append('${GRPCPPOUT and "--grpc_out=%s"%(GRPCPPOUT) or ""}')
    proto_cmd.append('${SOURCES}')
    env['GRPCOM'] = ' '.join(proto_cmd)

    # Add the proto scanner (if it wasn't added already)
    # env.AppendUnique(SCANNERS=SCons.Scanner.Scanner(function=protoc_scanner,
                                                    # skeys=[_PROTOSUFFIX]))

def exists(env):
    """Return True if `protoc` tool exists in the system."""
    return (env.Detect(_GRPCS) and env.Detect(_GRPC_PLUGIN))